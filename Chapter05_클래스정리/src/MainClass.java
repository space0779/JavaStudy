/*
 *    118page
 *    프로그램 (X) => 웹 개발에 필요한 자바 문법/형식/흐름
 *                                   ------------
 *    브라우저 (웹)      <===> 자바 <==> 오라클 (웹에 필요한 데이터가 저장)
 *    ----------
 * HTML/JavaScript/CSS
 *    => 오라클/MySQL(데이터베이스)
 *       연결할 수 있는 프로그램이 없다 
 *    =>  클래스 구조 
 *    1) 형식
 *       class => 필요한 모든 데이터 모아서 한번에 저장 목적 
 *                         -----------
 *                          기능 / 데이터 
 *       ** 클래스명 => 식별자 (키워드가 아니다)
 *                 => 약속 => 대문자로 시작 
 *                    ----------------- 들여쓰기
 *                 => 알파벳 
 *                 => _MainClass : 임시 클래스 
 *                 => 실무 
 *                    데이터형 => ~VO , ~DTO
 *                    액션(기능) => ~DAO , ~Manager , ~Service
 *       => 가독성 => 권장            
 *       class 클래스명
 *       {
 *           ----------------------------
 *             변수선언 : 멤버변수 , 공유변수 ==> 자동 default초기화 
 *             멤버변수
 *             ------
 *               멤버변수 => new를 사용해서 객체 생성시에 따로 저장되는 메모리
 *                      사용시) 객체명.변수명 
 *                      저장위치) Heap => 프로그래머 관리 영역
 *                              => 관리 소홀 => GC
 *                              => GC 대상 
 *                                 객체가 null 
 *                                 사용하지 않는 객체 
 *                                 => 멀티미디어 => System.gc()
 *                      사용범위) 해당 클래스 전체 
 *                              필요시에는 다른 클래스에서도 사용이 가능 
 *                      소멸시기) 프로그램 종료  
 *               공유변수(static) => 컴파일러에 의해 자동으로 메모리 할당
 *                      사용시) 객체명.변수명 
 *                            클래스명.변수명
 *                      저장위치) Method Area(static) => 한개만 저장이 가능 
 *                      사용범위) 해당 클래스 전체 
 *                              필요시에는 다른 클래스에서도 사용이 가능 
 *                      소멸시기) 프로그램 종료시까지 사용 
 *               ==> 따로 저장 / 한개 저장 
 *                   ------- 인스턴스 변수(90%)
 *                   => static : 데이터 목록 , 회원 목록 , 게시물 목록
 *                               ------------------------------
 *                                          | 모든 사람이 공유 (오라클)
 *           ----------------------------
 *             생성자 : 반드시 필요로 한다 (생성자가 없는 경우 자동으로 컴파일러가 생성)
 *                    = 멤버변수 초기화 
 *                    = 메모리 할당 (클래스 저장) => 호출된다 
 *                    = 시작과 동시에 처리하는 명령문
 *                      (오라클 연결 , 네트워크 => 서버 구동, 자동 로그인)
 *                    = 특징 
 *                      => 클래스명과 동일 
 *                      => 리턴형이 없다 
 *                      => 여러개를 만들 수 있다 (오버로딩) => 중복 함수 정의 
 *                         ** 오버로딩 조건 
 *                            1) 한개의 클래스에서 제작 
 *                            2) 메소드명이 동일 
 *                            3) 매개변수의 갯수나 데이터형이 다르다 => 다른 메소드로 인식
 *                            4) 리턴형은 관계없다 
 *                         ** 다른 클래스에서 객체 생성시에 반드시 => public 
 *             초기화블록 : 멤버변수의 초기값 담당 
 *             -------
 *               인스턴스 블록 : => 인스턴스 변수 , static 변수에 대한 초기화 가능 
 *               static 블록 : => static 변수만 초기화 가능 
 *               
 *               class ClassName
 *               {
 *                   변수 선언;
 *                   
 *                   {
 *                      인스턴스 블록 
 *                   }
 *                   
 *                   static
 *                   {
 *                      static 블록 
 *                   }
 *                   ------------------- 자동 호출 , 상속이 불가능 
 *                   *** 상속의 예외 조건 : 생성자 
 *               }
 *               
 *               => 초기화 순서 
 *                  1) 명시적인 초기화 => 고민
 *                  2) 초기화 블록 : static변수에 대한 초기화 
 *                     ---------  ------- 자동 저장  
 *                                   | MyBatis => XML (파싱)
 *                      => React (XML,JSON)
 *                  3) 생성자 : 인스턴스 변수 
 *                  
 *                  A a=new A()
 *                    - 메모리 주소 @9717913
 *                      --- ---
 *                      new => int malloc(sizeof(A)) 
 *                             ---------------------  사용이 많다 (연산자 승격)
 *                             => 기본형외의 데이터형은 크기를 알지 못한다 
 *                             => 리턴형 => 메모리 주소
 *                      A() => 변수의 초기값을 설정 
 *                        *** 생성자는 단독으로 호출이 불가능하다 
 *                            new 생성자()
 *                            -----------
 *           ----------------------------
 *             객체지향 3대 특성 
 *             => 읽기 / 쓰기 => getter/setter
 *                => 캡슐화
 *             => 이미 만들어진 메소드 => 변경 => 오버라이딩
 *             => 새로운 기능 추가 => 오버로딩
 *                => 다형성
 *             => 재사용 => is-a / has-a
 *                => 상속 / 포함 
 *             멤버메소드 => 클래스 영역에서만 선언/구현
 *              = 사용자 정의 메소드 => 기능 , 반복제거 , 재사용
 *                = 멤버 메소드 : new를 사용할때마다 따로 저장 
 *                  => 다른 클래스와 통신할때 주로 사용 (메세지)
 *                  [접근지정어=>public] 리턴형 메소드명(매개변수목록):선언부
 *                  {
 *                     구현부 
 *                  }
 *                  => 객체명.메소드명()
 *                     scan.nextInt()
 *                     s.trim()
 *                  => 리턴형 : 사용자 요청에 대한 결과값 
 *                             => 한개만 설정 (여러개일 경우 => 배열/클래스)
 *                             => 상세보기 => 클래스 <배열 : 목록> => 컬렉션 
 *                                                 |              |
 *                                                고정            가변 
 *                             => 리턴형은 반드시 사용한다
 *                                결과값이 있는 경우 : return 값
 *                                결과값이 없는 경우 : void => return 생략이 가능 
 *                  => 매개변수 : 사용자가 보내준 값 
 *                              예) 로그인창 => id,pwd
 *                                  검색기 => 검색어 
 *                                  클릭 => 번호 
 *                                  ------------
 *                                  게시판 글쓰기 
 *                                  회원가입 
 *                                  ------------ 클래스 (3개이상)
 *                                  ----------------
 *                  => 멤버메소드는 멤버변수 , static변수 , 지역변수를 사용할 수 있다
 *                  => 메소드 유형 
 *                     리턴형    매개변수 
 *                        ==> R(SELECT) => DML
 *                      O        O
 *                      O        X
 *                      ----------------- 메소드 자체 처리 (CRUD)
 *                        ==> CUD => (INSERT,UPDATE,DELETE)
 *                      X (void) O
 *                      X (void) X  
 *                      ----------------- 리턴형이 많을 수 있다 (웹)
 *                      사용법)
 *                            class A
 *                            {
 *                               int a=10;
 *                               void aaa()
 *                               {
 *                                  --- 구현
 *                                  return;
 *                               }
 *                               int bbb()
 *                               {
 *                                  --- 구현 
 *                                   return a; =>  데이터형이 동일 
 *                               }
 *                            }
 *                            
 *                            1) 메모리 저장 
 *                               A aa=new A();
 *                                 
 *                               --aa----
 *                                 0x100
 *                               --------
 *                                        ↖  => .(주소 접근 연산자)
 *                                        --0x100--
 *                                        
 *                                        ----a-----
 *                                           10   ==> aa.a
 *                                        ---------
 *                                           aaa() ==> aa.aaa()
 *                                        ---------
 *                                           bbb()  ==> aa.bbb()
 *                                        ---------
 *                                        ----------
 *                          => 리턴형이 있는 경우 
 *                             int a=aa.aaa();
 *                             ---      -----
 *                          => 리턴형이 없는 경우 
 *                             aa.bbb()
 *                                 
 *                = 공유 메소드 => static 
 *                  형식)
 *                     [접근지정어] static 리턴형 메소드명(매개변수목록)
 *                     {
 *                        
 *                     }
 *                     static [접근지정어]  리턴형 메소드명(매개변수목록)
 *                     {
 *                        
 *                     }
 *                    => static메소드는 static변수,static메소드는 
 *                       사용이 자유롭다 
 *                    => static메소드 안에서는 인스턴스변수,메소드는 반드시 
 *                       객체 생성후 사용이 가능 
 *                = 상속을 방지 => final (종단메소드)
 *                = 선언만 한다 => 구현은 프로그램에 맞게 => abstract
 *                  버튼 클릭 => 설계  (추상클래스 / 인터페이스)
 *                                             --------
 *              = 라이브러리 메소드 (9장)
 *                --------
 *                 라이브러리 VS 프레임워크 
 *                 -------    --------
 *                   |            |
 *                 완제품(jar)    레고(java) =>  전자정부,ANY
 *           ----------------------------
 *       }
 *    2) 메모리 저장 
 *       122page ==> 
 *        객체생성 
 *        --- 기본형 => 변수 
 *        --- 클래스 => 객체 (메모리 공간)
 *        --- 하둡 : 만든사람 아들의 장난감 이름 
 *        --- 클라우드 : 구글의 사장 (네트워크 => 표현 구름)
 *        new 생성자()
 *        class A
 *        {
 *        }
 *        
 *        new A() => Thread() => new Thread(),new 윈도우()
 *        -------메모리 주소 리턴 => 필요한 경우에는 주소를 저장
 *        A a=new A();
 *          --
 *          
 *        ==> 123page => 객체 사용 
 *            A a=new A();
 *            a.변수,메소드 
 *            
 *            A a;
 *            a=new A();
 *    3) 호출 
 */
class A
{
	/*int a=10;
	static int b=20;//메모리에 저장 완료
	void aaa()
	{
		System.out.println(a);
		System.out.println(b);
	}
	static void bbb()
	{
		A aa=new A();
		System.out.println(aa.a);
		System.out.println(b);
	}*/
	void display()
	{
		System.out.println("A:display Call...");
	}
	void aaa()
	{
		System.out.println("A:aaa Call");
	}
}
public class MainClass {
    
	 public static void main(String[] args) {
		// TODO Auto-generated method stub
        /* A aa=new A();// aa라는 메모리에 a변수
         System.out.println(aa.a);
         System.out.println(aa.b);
         System.out.println(A.b);*/
		/*new A().display();
        new A().aaa(); */
		 A a=new A();
		 a.display();
		 a.aaa();
	}
    
}
