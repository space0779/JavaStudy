package com.sist.main;
/*
 *    객체지향의 3대 특성 => 문법사항이 아니다, 권장사항
 *    --------------
 *    class Windouw extends JFrame => 재사용 => 상속
 *      => 변경 사항이 있는 경우
 *    class Window 
 *    {
 *       JFrame f=new JFrame() => 재사용 => 포함 => 변경사항 없다
 *    }
 *    => 웹 / 스프링 => 상속이 거의 없다 => 포함
 *    
 *    1. 캡슐화 : 데이터 보호
 *              멤버변수 => private(은닉화) => 기능 설정을 통해 접근
 *                                        -------
 *                                         멤버변수 : 저장/읽기
 *                                         ---------------
 *                                           |
 *                                         getter/setter
 *              데이터를 감추고 메소드 통해서 접근하는 방식
 *    2. 상속/포함 : 기본의 클래스를 재사용
 *       상속
 *       ---
 *       1) 목적
 *          = 재사용 (신뢰성 , 개발 속도가 빠르다)
 *          = 유지보수를 쉽게 만든다
 *          = 중복을 최대한 제거
 *          = 통일성이 있는 코드 작성
 *          = 단점 : 실행속도가 늦다 (게임 => 자바(x),C/C++(x),어셈블러) 
 *                 ------ 최적화 => exe (웹,모바일)
 *                                    J2EE J2ME => J2SE
 *          = 장점 : 적은 양의 코드로 새로운 클래스 작성
 *          
 *            class A extends JFrame
 *            {
 *            }
 *            
 *            코드를 공통적으로 관리하기 때문에 여러 코드를 추가, 변경이 용이
 *                                    -----------   -------
 *                                       오버로딩      오버라이딩
 *            *** 자바는 오버라이딩이다 => 변경
 *                                  ---
 *                                   | 프레임워크 (실제 소스)
 *                                 스프링 => 전자정부프레임워크
 *                                      => 애니프레임워크
 *       2) 작성방법
 *          => 확장한다 => 기존의 클래스를 확장해서 새로운 클래스 제작
 *             extends
 *          => class Parent
 *             class Child extends Parent
 *                         -------
 *          => 단점 => 단일 상속만 가능하다
 *       3) 상속의 특징
 *          1. 생성자, 초기화 블록은 상속이 안된다
 *             상속받은 클래스의 객체 생성시에 => 상속내린 클래스가 먼저 메모리 할당을 한다
 *             class A
 *             {
 *                int a,b;
 *                String s;
 *             }     
 *             
 *             class B extends A
 *             {
 *             
 *             }
 *             
 *             B b=new B();
 *             
 *              Stack => 메모리에 처리 (할당,해제)
 *             --b--
 *             
 *             -----     Heap => 실제 데이터 저장 (프로그래머)
 *                      ---------------
 *                        ----super----
 *                          ----a----
 *                          ----b----
 *                          
 *                        -------------
 *                        ----this-----
 *                        -------------                                                                                              
 *    3. 다형성 :                                       
 */
class A
{
	int a;
}
class B extends A
{
	int c;
	public B() {
		super();
		
	}

	
}
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
